from pysd.statements import (
    DESEC,
    RFILE,
    SHAXE,
    LOADC,
    GRECO,
    FILST,
    BASCO,
    LoadCase,
    RETYP,
    DECAS,
    RELOC,
    EXECD,
    LORES,
    CMPEC,
    SHSEC,
    XTFIL,
    TABLE,
    RMPEC,
    Cases,
    HEADING,
    DEPAR,
)
from pysd import SD_BASE, ValidationLevel
from pysd.helpers import create_axes_based_on_3_points_in_plane
from shapely.geometry import Point

# Note: Global validation mode configuration is no longer needed
# Validation is now controlled per-model via SD_BASE constructor parameters

def _calc_vector(p1: Point, p2: Point) -> tuple[float, float, float]:
    """Calculate vector from p1 to p2"""
    return (p2.x - p1.x, p2.y - p1.y, p2.z - p1.z)

def create_basic_model_components(sd_model: SD_BASE) -> None:
    """
    Create and add basic model components like FILST and RFILE.

    Args:
        sd_model: The SD_BASE model to add components to
    """
    # Add FILST entry
    filst_entry = FILST(name="dam", vers="1.0", date="14.aug-2025", resp="som")
    sd_model.add(filst_entry)

    # Add RFILE entry
    rfile_definition = RFILE(
        pre=r"C:\Users\nx74\Work\sestra",
        fnm="R1",
        suf="SIN",
        typ="SHE",
    )
    sd_model.add(rfile_definition)


def create_design_sections(sd_model: SD_BASE) -> None:
    """
    Create design sections and axes related design sections.
    """

  
    p1 = Point(-18.955968179598393, 0.0, 0.0)
    p2 = Point(1.0, 0.0, 27.5)
    xh=_calc_vector(p1,p2)


    sd_model.add(SHSEC(pa="DAM",xp=(-18.9,0.0,0.1),xf=(1,0,0),xh=xh,fs=(1,12),hs=(1,12))) 

    
    sd_model.add(SHAXE(pa="DAM", x1=(1, 0, 0), x2=(0, 1, 0), x3=(0, 0, 1), fs=(1, 12), hs=(1,12)))

def create_load_components(sd_model: SD_BASE) -> None:
    """
    Create and add load-related components like LOADC and BASCO.
    """

    # Create and add LOADC entries first
    loadc = [
        LOADC(
            run_number=1, alc=(1, 3), olc=(101, 103)
        ),
        LOADC(table=True),
        LOADC(pri=True),
    ]
    sd_model.add(loadc)

    load_cases = [
        LoadCase(lc_type="OLC", lc_numb=i + 101, lc_fact=1.2) for i in range(3)
    ]

    sd_model.add(HEADING(bas_id="101", description="Last kombinasjoner"))
    basco = BASCO(id=101, load_cases=load_cases)
    sd_model.add(basco)
    
def create_material_components(sd_model: SD_BASE) -> None:
    """
    Create and add material-related components like CMPEC, RMPEC, and DEPAR.

    """
    # Add design parameters
    depar = DEPAR(
        n_lay=10,  # Number of integration layers through shell thickness
        d_sig=10.0,  # Maximum stress deviation before iteration stops
        d_cod="NS",  # Norwegian standard design code
    )
    sd_model.add(depar)

    # Add material properties concrete
    cmpec = CMPEC(id=1, gr="B35")
    sd_model.add(cmpec)

    # Add material properties reinforcement
    rmpec = RMPEC(id=1, gr="500")
    sd_model.add(rmpec)


def create_reinforment_components(sd_model: SD_BASE) -> None:
    """
    Create and add reinforcement-related components.
    """
    # Example of creating a reinforcement type
    sd_model.add(
        HEADING(
            statement="Reinforcement types",
            description="Defining reinforcement types used in the model",
            comment="Generated by PySD",
        )
    )
    sd_model.add(
        RETYP(
            id=1,
            mp=1,
            ar=2753.0e-6,
            c2=0.055,
            th=0.014,
            di=0.012,
            nr=1,
            lb="1.0D12_c150",
        )
    )
    

    sd_model.add(RELOC(id="X11", pa="DAM", rt=1, fa=1, al=0))
    sd_model.add(RELOC(id="Y12", pa="DAM", rt=1, fa=1, al=90))
    sd_model.add(RELOC(id="X12", pa="DAM", rt=1, fa=2, al=0))
    sd_model.add(RELOC(id="Y22", pa="DAM", rt=1, fa=2, al=90))


def create_analysis_components(sd_model: SD_BASE) -> None:
    """
    Create and add analysis-related components like DECAS.

    """
  
    sd_model.add(DESEC(pa="DAM"))

    # select the design load cases to be checked
    # Add DECAS using tuple format with greco
    # sd_model.add(DECAS(ls='ULS', bas=(101,102), greco='A'))
    sd_model.add(DECAS(ls="ULS", bas=(101)))

    # Add DECAS using string represtation of the load case
    # sd_model.add(DECAS(ls='ULS', bas="400-409"))

    # xtract ploting data


    sd_model.add(XTFIL(fn="DAM", pa="DAM", fs=(1, 12), hs=(1, 12)))

    # Add table for printing
    sd_model.add(TABLE(tab="GE"))
    sd_model.add(TABLE(tab="AX"))
    

    # Add final execution directive
    sd_model.add(EXECD(dm="V"))




def main(output_file: str = r"dam.inp") -> None:
    """
    Main function to create and write the model.
    """
    print(f"Building model to be written to {output_file}...")

    # NEW SIMPLIFIED API: No context managers, no manual validation management
    model = SD_BASE(
        validation_level=ValidationLevel.NORMAL, cross_object_validation=True
    )

    # Create all model components in a structured way
    create_basic_model_components(model)

    # Create load components (BASCO needed by GRECO)
    create_load_components(model)

    # Create design sections
    create_design_sections(model)

    # Create materials first (needed by RETYP)
    create_material_components(model)

    # Create reinforcement types (needed by RELOC)
    create_reinforment_components(model)

    # Create analysis components last
    create_analysis_components(model)

    # CLEAN AND SIMPLE: Just call write()
    model.write(output_file)
    print(f"Model successfully written to {output_file}")

if __name__ == "__main__":
    main()

